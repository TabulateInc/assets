@import './data-uri-images';

$arrow-possition: no-repeat right 8px center;
$arrow-down: $img-arrow-down $arrow-possition $input-bg;
$arrow-down-gray: $img-arrow-down-gray $arrow-possition transparent;
$arrow-down-white: $img-arrow-down-white $arrow-possition transparent;

//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  padding: 0;
  margin: 0;
  border: 0;
  // Chrome and Firefox set a `min-width: min-content;` on fieldsets,
  // so we reset that to ensure it behaves more like a standard block element.
  // See https://github.com/twbs/bootstrap/issues/12359.
  min-width: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: $line-height-computed;
  font-size: ($font-size-base * 1.5);
  line-height: inherit;
  color: $legend-color;
  border: 0;
  border-bottom: 1px solid $legend-border-color;
}

label {
  display: inline-block;
  max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
  margin-bottom: 5px;
  font-weight: normal;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  @include box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px \9; // IE8-9
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

select::-ms-expand {
  display: none;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  @include tab-focus;
}

input[type="text"],
input[type="number"],
input[type="email"],
input[type="password"],
textarea {
  -webkit-appearance: none;
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  /* display: none; <- Crashes Chrome on hover */
  -webkit-appearance: none;
  /*margin: 0; [> <-- Apparently some margin are still there even though it's hidden <]*/
}

// Adjust output element
output {
  display: block;
  padding-top: ($padding-base-vertical + 1);
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-control {
  display: block;
  width: 100%;
  height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: $padding-base-vertical $padding-base-horizontal;
  font-size: $font-size-base;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: $input-border-width solid $input-border;
  border-radius: $input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  box-shadow: none;

  @include transition(border-color ease-in-out .15s);

  &:hover {
    border-color: $input-border-hover;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus;

  // Placeholder
  @include placeholder;

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &.disabled,
  &[disabled].btn,  // select.btn
  fieldset[disabled] &,
  fieldset[disabled] &.btn {
    box-shadow: none;
    background-color: $input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
    cursor: $cursor-disabled;
    border-color: $input-border-disabled;
    color: $input-color-disabled;
  }

  &[readonly] {
    box-shadow: none;
    background-color: $white;
  }

  email-input.mod-lg-rounded &,
  state-picker.mod-lg-rounded &,
  &.mod-lg-rounded {
    appearance: none;
    font-size: $input-text-size;
    height: $input-height-lg; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
    line-height: 1em;
    padding: $input-padding-vertical $input-padding-horizontal;  // $padding-base-vertical $padding-base-horizontal;
    border-radius: $input-border-radius-lg; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.

    @media (max-width: $screen-xs-max) {
      height: 50px;
    }

    + .form-control__over {
      line-height: $input-height-lg;

      @media (max-width: $screen-xs-max) {
        line-height: 50px;
      }
    }
  }

  // [converter] extracted textarea& to textarea.form-control
}

.form-control__over {
  position: absolute;
  top: 0;
  right: 0;
  font-size: $font-size-base;
  line-height: $input-height-base;
}

// Reset height for `textarea`s
textarea.form-control {
  height: auto;
}


// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
//
// In Mobile Safari, setting `display: block` on temporal inputs causes the
// text within the input to become vertically misaligned. As a workaround, we
// set a pixel line-height that matches the given height of the input, but only
// for Safari. See https://bugs.webkit.org/show_bug.cgi?id=139848

@media screen and (-webkit-min-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    line-height: $input-height-base;

    &.input-sm,
    .input-group-sm & {
      line-height: $input-height-small;
    }

    &.input-lg,
    .input-group-lg & {
      line-height: $input-height-large;
    }
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: 0;
  margin-bottom: 10px;
  padding-left: 0;

  label {
    min-height: $line-height-computed; // Ensure the input doesn't jump when there is no text
    padding-left: 5px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
    position: relative;
    top: 2px;
  }
}
.radio input[type="radio"],
.checkbox input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 4px \9;
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: $cursor-disabled;
  }
}

// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: $cursor-disabled;
    }
  }
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.

@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $line-height-small, $input-border-radius-small);

@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $line-height-large, $input-border-radius-large);

// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: ($input-height-base * 1.25);
  }
}

// Feedback states
.has-success {
  @include form-control-validation($state-success-text, $state-success-text, $state-success-bg);
}
.has-warning {
  @include form-control-validation($state-warning-text, $state-warning-text, $state-warning-bg);
}
.has-error {
  @include form-control-validation($state-danger-text, $alert-danger-text, $state-danger-bg);
}

// Reposition feedback icon if input has visible label above
.has-feedback label {

  & ~ .form-control-feedback {
     top: ($line-height-computed + 5); // Height of the `label` and its margin
  }
  &.sr-only ~ .form-control-feedback {
     top: 0;
  }
}
select.btn {
  @include custom-selector();

  background: $arrow-down;
  appearance: none;

  option {
    text-align: left;
  }

  &:hover option {
    border-color: $input-border-hover;
    background-color: $input-bg;
  }
}

select.form-control.mod-lg-rounded {
  background: $arrow-down;
}

select.btn,
.btn[bs-select] {
  &.btn-default {
    border-color: $input-border;
    color: $input-color;

    &:focus,
    &:hover,
    &:active {
      border-color: $input-border-hover;
      background-color: $input-bg;
      color: $input-color;
    }
  }
}

.has-error {              // fixes the issue with select element which already has border with !important color
  select.form-control {
    border-color: $grapefruit-dark !important;

    &:focus {
      border-color: $grapefruit-dark !important;
    }
  }
}

.inputs-separator,
.inputs-separator.checkbox.mod-custom {
  margin-bottom: $inputs-separator-distance*2;
  margin-top: $inputs-separator-distance;
  padding-left: $inputs-separator-distance;
  padding-right: $inputs-separator-distance;
}

.add-control,
.add-control.checkbox.mod-custom,
.add-control.radio {
  padding-left: 0;
  padding-right: $input-in-control-padding-right;
  margin-bottom: $margin-normal;

  button,
  input,
  div.form-control,
  select {
    height: $input-in-control-height;
  }

  .form-control__over {
    line-height: $input-in-control-height;
  }

  @media (max-width: $screen-xs-max){
    padding-left: 0;
    padding-right: 0;
  }
}

